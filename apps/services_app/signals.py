from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from asgiref.sync import async_to_sync

from apps.accounts_app.models import ApplicationDocument

from .models import ConsultationRequest, ServiceApplication


@receiver(post_save, sender=ServiceApplication)
def notify_admin_on_new_application(sender, instance, created, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""

    if created:
        from apps.services_app.telegram_bot import send_application_notification

        async_to_sync(send_application_notification)(instance)


@receiver(post_save, sender=ApplicationDocument)
def notify_admin_on_document_application_upload(sender, instance, created, **kwargs):
    if created:
        from apps.services_app.telegram_bot import (
            send_application_document_notification,
        )

        instance.application.default_application
        async_to_sync(send_application_document_notification)(instance)


@receiver(post_save, sender=ConsultationRequest)
def notify_admin_on_new_consultation(sender, instance, created, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    if created:
        from apps.services_app.telegram_bot import send_consultation_notification

        async_to_sync(send_consultation_notification)(instance)


@receiver(post_save, sender=ServiceApplication)
def notify_user_on_status_change(sender, instance, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è"""
    if instance.pk:
        from apps.services_app.telegram_bot import create_user_notification

        try:
            user = instance.user
            service_name = instance.service.title

            status_messages = {
                "approved": f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ '{service_name}' –æ–¥–æ–±—Ä–µ–Ω–∞!",
                "rejected": f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ '{service_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.",
                "in_progress": f"üîÑ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ '{service_name}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.",
                "pending": f"‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ '{service_name}' –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.",
            }

            status_description = {
                "approved": "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å.",
                "rejected": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
                "in_progress": "–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                "pending": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∑–∞—è–≤–∫—É.",
            }

            title = status_messages.get(instance.status, "üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏")
            body = status_description.get(instance.status, "")

            async_to_sync(create_user_notification)(user, title, body)

        except sender.DoesNotExist:
            pass


@receiver(post_save, sender=ConsultationRequest)
def notify_user_on_consultation_status_change(sender, instance, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è"""
    if instance.pk:
        from apps.services_app.telegram_bot import create_user_notification

        try:
            user = instance.user

            status_messages = {
                "in_progress": "‚è≥ –í–∞—à–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è!",
                "answered": "‚úÖ –í–∞–º –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
            }

            status_description = {
                "in_progress": "–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç.",
                "answered": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏–ª–∏ —á–∞—Ç.",
            }

            title = status_messages.get(instance.status, "üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")
            body = status_description.get(instance.status, "")

            async_to_sync(create_user_notification)(user, title, body)

        except sender.DoesNotExist:
            pass
